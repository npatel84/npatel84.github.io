{"ast":null,"code":"var _jsxFileName = \"/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import './Experiences.scss';\n\n// interface Image {\n//   src: string;\n//   alt: string;\n//   projectName: string;\n//   companyName: string;\n// }\n\n// interface ExperiencesProps {\n//   images: Image[];\n// }\n\n// const Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n//   return (\n//     <div className=\"experiences\">\n//       {images.map((image, index) => (\n//         <div key={index} className=\"experience-item\">\n//           <img src={image.src} alt={image.alt} className=\"experience-image\" />\n//           <div className=\"text-overlay\">\n//             <h3 className=\"project-name\">{image.projectName}</h3>\n//             <p className=\"company-name\">{image.companyName}</p>\n//           </div>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Experiences;\n\nimport React, { useRef, useEffect } from 'react';\nimport './Experiences.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Experiences = ({\n  images\n}) => {\n  _s();\n  const canvasRefs = useRef(new Map());\n  useEffect(() => {\n    const drawTextOverImage = (context, image, canvas, imgElement) => {\n      // Set canvas size to image size\n      canvas.width = imgElement.naturalWidth;\n      canvas.height = imgElement.naturalHeight;\n\n      // Clear the canvas and draw the image\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.drawImage(imgElement, 0, 0, canvas.width, canvas.height);\n\n      // Draw the project name\n      context.fillStyle = 'white';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.font = '48px Amiri';\n      const textX = canvas.width / 2;\n      const textY = canvas.height / 2;\n      context.fillText(image.projectName, textX, textY);\n\n      // Draw the company name\n      context.font = '24px Poppins';\n      context.fillText(image.companyName, textX, textY + 30);\n\n      // Create the effect of text color change at the edges\n      context.globalCompositeOperation = 'difference';\n      context.fillStyle = 'black';\n      context.fillText(image.projectName, textX, textY);\n      context.fillText(image.companyName, textX, textY + 30);\n      context.globalCompositeOperation = 'source-over';\n    };\n    const drawCanvas = (image, index, imgElement) => {\n      const canvas = canvasRefs.current.get(index);\n      if (canvas) {\n        const context = canvas.getContext('2d');\n        if (context) {\n          drawTextOverImage(context, image, canvas, imgElement);\n        }\n      }\n    };\n    images.forEach((image, index) => {\n      const img = new Image();\n      img.src = image.src;\n      img.onload = () => {\n        drawCanvas(image, index, img);\n      };\n    });\n  }, [images]); // Since drawCanvas is defined inside useEffect, it's not a dependency\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"experiences\",\n    children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"experience-item\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: el => {\n          if (el) canvasRefs.current.set(index, el);\n        },\n        className: \"experience-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(Experiences, \"t0dpUFAF7gDND3z8k6ZNW4Pp5Wc=\");\n_c = Experiences;\nexport default Experiences;\nvar _c;\n$RefreshReg$(_c, \"Experiences\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","Experiences","images","_s","canvasRefs","Map","drawTextOverImage","context","image","canvas","imgElement","width","naturalWidth","height","naturalHeight","clearRect","drawImage","fillStyle","textAlign","textBaseline","font","textX","textY","fillText","projectName","companyName","globalCompositeOperation","drawCanvas","index","current","get","getContext","forEach","img","Image","src","onload","className","children","map","ref","el","set","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx"],"sourcesContent":["// import React from 'react';\n// import './Experiences.scss';\n\n// interface Image {\n//   src: string;\n//   alt: string;\n//   projectName: string;\n//   companyName: string;\n// }\n\n// interface ExperiencesProps {\n//   images: Image[];\n// }\n\n// const Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n//   return (\n//     <div className=\"experiences\">\n//       {images.map((image, index) => (\n//         <div key={index} className=\"experience-item\">\n//           <img src={image.src} alt={image.alt} className=\"experience-image\" />\n//           <div className=\"text-overlay\">\n//             <h3 className=\"project-name\">{image.projectName}</h3>\n//             <p className=\"company-name\">{image.companyName}</p>\n//           </div>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Experiences;\n\n\nimport React, { useRef, useEffect } from 'react';\nimport './Experiences.scss';\n\ninterface Image {\n  src: string;\n  alt: string;\n  projectName: string;\n  companyName: string;\n}\n\ninterface ExperiencesProps {\n  images: Image[];\n}\n\nconst Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n  const canvasRefs = useRef(new Map<number, HTMLCanvasElement>());\n\n  useEffect(() => {\n    const drawTextOverImage = (\n      context: CanvasRenderingContext2D,\n      image: Image,\n      canvas: HTMLCanvasElement,\n      imgElement: HTMLImageElement\n    ) => {\n      // Set canvas size to image size\n      canvas.width = imgElement.naturalWidth;\n      canvas.height = imgElement.naturalHeight;\n\n      // Clear the canvas and draw the image\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.drawImage(imgElement, 0, 0, canvas.width, canvas.height);\n\n      // Draw the project name\n      context.fillStyle = 'white';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.font = '48px Amiri';\n      const textX = canvas.width / 2;\n      const textY = canvas.height / 2;\n      context.fillText(image.projectName, textX, textY);\n\n      // Draw the company name\n      context.font = '24px Poppins';\n      context.fillText(image.companyName, textX, textY + 30);\n\n      // Create the effect of text color change at the edges\n      context.globalCompositeOperation = 'difference';\n      context.fillStyle = 'black';\n      context.fillText(image.projectName, textX, textY);\n      context.fillText(image.companyName, textX, textY + 30);\n      context.globalCompositeOperation = 'source-over';\n    };\n\n    const drawCanvas = (image: Image, index: number, imgElement: HTMLImageElement) => {\n      const canvas = canvasRefs.current.get(index);\n      if (canvas) {\n        const context = canvas.getContext('2d');\n        if (context) {\n          drawTextOverImage(context, image, canvas, imgElement);\n        }\n      }\n    };\n\n    images.forEach((image, index) => {\n      const img = new Image();\n      img.src = image.src;\n      img.onload = () => {\n        drawCanvas(image, index, img);\n      };\n    });\n  }, [images]); // Since drawCanvas is defined inside useEffect, it's not a dependency\n\n  return (\n    <div className=\"experiences\">\n      {images.map((image, index) => (\n        <div key={index} className=\"experience-item\">\n          <canvas\n            ref={(el) => {\n              if (el) canvasRefs.current.set(index, el);\n            }}\n            className=\"experience-canvas\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Experiences;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}