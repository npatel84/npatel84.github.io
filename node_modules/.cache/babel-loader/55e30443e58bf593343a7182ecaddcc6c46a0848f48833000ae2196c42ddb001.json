{"ast":null,"code":"var _jsxFileName = \"/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import './Experiences.scss';\n\n// interface Image {\n//   src: string;\n//   alt: string;\n//   projectName: string;\n//   companyName: string;\n// }\n\n// interface ExperiencesProps {\n//   images: Image[];\n// }\n\n// const Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n//   return (\n//     <div className=\"experiences\">\n//       {images.map((image, index) => (\n//         <div key={index} className=\"experience-item\">\n//           <img src={image.src} alt={image.alt} className=\"experience-image\" />\n//           <div className=\"text-overlay\">\n//             <h3 className=\"project-name\">{image.projectName}</h3>\n//             <p className=\"company-name\">{image.companyName}</p>\n//           </div>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Experiences;\n\nimport React, { useRef, useEffect } from 'react';\nimport './Experiences.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Experiences = ({\n  images\n}) => {\n  _s();\n  const canvasRefs = useRef(new Map());\n  useEffect(() => {\n    images.forEach((image, index) => {\n      const img = new Image();\n      img.src = image.src;\n      img.onload = () => {\n        drawCanvas(image, index, img);\n      };\n    });\n  }, [images]);\n  const drawCanvas = (image, index, imgElement) => {\n    const canvas = canvasRefs.current.get(index);\n    if (canvas) {\n      const context = canvas.getContext('2d');\n      if (context) {\n        drawTextOverImage(context, image, canvas, imgElement);\n      }\n    }\n  };\n  const drawTextOverImage = (context, image, canvas, imgElement) => {\n    canvas.width = imgElement.naturalWidth;\n    canvas.height = imgElement.naturalHeight;\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.drawImage(imgElement, 0, 0, canvas.width, canvas.height);\n\n    // Measure text width (requires additional handling to support multiline text)\n    context.font = '48px Amiri';\n    const projectNameWidth = context.measureText(image.projectName).width;\n    const companyNameWidth = context.measureText(image.companyName).width;\n\n    // Set up a clipping region to only show text within the image bounds\n    context.beginPath();\n    context.rect(0, 0, canvas.width, canvas.height);\n    context.clip();\n\n    // Draw the project and company names in white within the clipping region\n    drawText(context, image.projectName, '48px Amiri', canvas.width / 2, canvas.height / 2, 'white');\n    drawText(context, image.companyName, '24px Poppins', canvas.width / 2, canvas.height / 2 + 30, 'white');\n\n    // Remove the clipping region\n    context.restore();\n\n    // Draw the parts of the text that extend beyond the image bounds in black\n    // This needs more complex logic to detect the overflow and draw it accordingly\n    drawTextOutsideBounds(context, image.projectName, '48px Amiri', canvas.width, projectNameWidth, canvas.height / 2, 'black');\n    drawTextOutsideBounds(context, image.companyName, '24px Poppins', canvas.width, companyNameWidth, canvas.height / 2 + 30, 'black');\n  };\n  const drawText = (context, text, font, x, y, color) => {\n    context.fillStyle = color;\n    context.font = font;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillText(text, x, y);\n  };\n  const drawTextOutsideBounds = (context, text, font, canvasWidth, textWidth, y, color) => {\n    // Logic to detect overflow and draw only the overflowing part in black\n    // This is a placeholder for the actual implementation\n    if (textWidth > canvasWidth) {\n      context.fillStyle = color;\n      context.font = font;\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.fillText(text, canvasWidth - (textWidth - canvasWidth) / 2, y);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"experiences\",\n    children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"experience-item\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: el => {\n          if (el) canvasRefs.current.set(index, el);\n        },\n        className: \"experience-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(Experiences, \"t0dpUFAF7gDND3z8k6ZNW4Pp5Wc=\");\n_c = Experiences;\nexport default Experiences;\nvar _c;\n$RefreshReg$(_c, \"Experiences\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","Experiences","images","_s","canvasRefs","Map","forEach","image","index","img","Image","src","onload","drawCanvas","imgElement","canvas","current","get","context","getContext","drawTextOverImage","width","naturalWidth","height","naturalHeight","clearRect","drawImage","font","projectNameWidth","measureText","projectName","companyNameWidth","companyName","beginPath","rect","clip","drawText","restore","drawTextOutsideBounds","text","x","y","color","fillStyle","textAlign","textBaseline","fillText","canvasWidth","textWidth","className","children","map","ref","el","set","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx"],"sourcesContent":["// import React from 'react';\n// import './Experiences.scss';\n\n// interface Image {\n//   src: string;\n//   alt: string;\n//   projectName: string;\n//   companyName: string;\n// }\n\n// interface ExperiencesProps {\n//   images: Image[];\n// }\n\n// const Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n//   return (\n//     <div className=\"experiences\">\n//       {images.map((image, index) => (\n//         <div key={index} className=\"experience-item\">\n//           <img src={image.src} alt={image.alt} className=\"experience-image\" />\n//           <div className=\"text-overlay\">\n//             <h3 className=\"project-name\">{image.projectName}</h3>\n//             <p className=\"company-name\">{image.companyName}</p>\n//           </div>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Experiences;\n\n\nimport React, { useRef, useEffect } from 'react';\nimport './Experiences.scss';\n\ninterface Image {\n  src: string;\n  alt: string;\n  projectName: string;\n  companyName: string;\n}\n\ninterface ExperiencesProps {\n  images: Image[];\n}\n\nconst Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n  const canvasRefs = useRef(new Map<number, HTMLCanvasElement>());\n\n  useEffect(() => {\n    images.forEach((image, index) => {\n      const img = new Image();\n      img.src = image.src;\n      img.onload = () => {\n        drawCanvas(image, index, img);\n      };\n    });\n  }, [images]);\n\n  const drawCanvas = (\n    image: Image,\n    index: number,\n    imgElement: HTMLImageElement\n  ) => {\n    const canvas = canvasRefs.current.get(index);\n    if (canvas) {\n      const context = canvas.getContext('2d');\n      if (context) {\n        drawTextOverImage(context, image, canvas, imgElement);\n      }\n    }\n  };\n\n  const drawTextOverImage = (\n    context: CanvasRenderingContext2D,\n    image: Image,\n    canvas: HTMLCanvasElement,\n    imgElement: HTMLImageElement\n  ) => {\n    canvas.width = imgElement.naturalWidth;\n    canvas.height = imgElement.naturalHeight;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.drawImage(imgElement, 0, 0, canvas.width, canvas.height);\n\n    // Measure text width (requires additional handling to support multiline text)\n    context.font = '48px Amiri';\n    const projectNameWidth = context.measureText(image.projectName).width;\n    const companyNameWidth = context.measureText(image.companyName).width;\n\n    // Set up a clipping region to only show text within the image bounds\n    context.beginPath();\n    context.rect(0, 0, canvas.width, canvas.height);\n    context.clip();\n\n    // Draw the project and company names in white within the clipping region\n    drawText(context, image.projectName, '48px Amiri', canvas.width / 2, canvas.height / 2, 'white');\n    drawText(context, image.companyName, '24px Poppins', canvas.width / 2, canvas.height / 2 + 30, 'white');\n\n    // Remove the clipping region\n    context.restore();\n\n    // Draw the parts of the text that extend beyond the image bounds in black\n    // This needs more complex logic to detect the overflow and draw it accordingly\n    drawTextOutsideBounds(context, image.projectName, '48px Amiri', canvas.width, projectNameWidth, canvas.height / 2, 'black');\n    drawTextOutsideBounds(context, image.companyName, '24px Poppins', canvas.width, companyNameWidth, canvas.height / 2 + 30, 'black');\n  };\n\n  const drawText = (\n    context: CanvasRenderingContext2D,\n    text: string,\n    font: string,\n    x: number,\n    y: number,\n    color: string\n  ) => {\n    context.fillStyle = color;\n    context.font = font;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillText(text, x, y);\n  };\n\n  const drawTextOutsideBounds = (\n    context: CanvasRenderingContext2D,\n    text: string,\n    font: string,\n    canvasWidth: number,\n    textWidth: number,\n    y: number,\n    color: string\n  ) => {\n    // Logic to detect overflow and draw only the overflowing part in black\n    // This is a placeholder for the actual implementation\n    if (textWidth > canvasWidth) {\n      context.fillStyle = color;\n      context.font = font;\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.fillText(text, canvasWidth - (textWidth - canvasWidth) / 2, y);\n    }\n  };\n\n  return (\n    <div className=\"experiences\">\n      {images.map((image, index) => (\n        <div key={index} className=\"experience-item\">\n          <canvas\n            ref={(el) => {\n              if (el) canvasRefs.current.set(index, el);\n            }}\n            className=\"experience-canvas\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Experiences;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}