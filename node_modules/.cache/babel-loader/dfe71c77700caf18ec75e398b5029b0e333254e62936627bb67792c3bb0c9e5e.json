{"ast":null,"code":"var _jsxFileName = \"/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import './Experiences.scss';\n\n// interface Image {\n//   src: string;\n//   alt: string;\n//   projectName: string;\n//   companyName: string;\n// }\n\n// interface ExperiencesProps {\n//   images: Image[];\n// }\n\n// const Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n//   return (\n//     <div className=\"experiences\">\n//       {images.map((image, index) => (\n//         <div key={index} className=\"experience-item\">\n//           <img src={image.src} alt={image.alt} className=\"experience-image\" />\n//           <div className=\"text-overlay\">\n//             <h3 className=\"project-name\">{image.projectName}</h3>\n//             <p className=\"company-name\">{image.companyName}</p>\n//           </div>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Experiences;\n\nimport React, { useRef, useEffect } from 'react';\nimport './Experiences.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Experiences = ({\n  images\n}) => {\n  _s();\n  const canvasRefs = useRef(new Map());\n  useEffect(() => {\n    const drawCanvas = () => {\n      images.forEach((image, index) => {\n        const canvas = canvasRefs.current.get(index);\n        if (canvas) {\n          const context = canvas.getContext('2d');\n          if (context) {\n            drawTextOverImage(context, image, canvas);\n          }\n        }\n      });\n    };\n    drawCanvas();\n    // Add event listener for resizing if you want to handle responsive canvas resizing\n    window.addEventListener('resize', drawCanvas);\n\n    // Cleanup listener\n    return () => {\n      window.removeEventListener('resize', drawCanvas);\n    };\n  }, [images]);\n  const drawTextOverImage = (context, image, canvas) => {\n    const img = new Image();\n    img.src = image.src;\n    img.onload = () => {\n      // Clear the canvas and draw the image\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      // Draw the project name\n      context.fillStyle = 'white';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.font = '48px Amiri';\n      const textX = canvas.width / 2;\n      const textY = canvas.height / 2;\n      context.fillText(image.projectName, textX, textY);\n\n      // Draw the company name\n      context.font = '24px Poppins';\n      context.fillText(image.companyName, textX, textY + 30);\n\n      // Create the effect of text color change at the edges\n      context.globalCompositeOperation = 'difference';\n      context.fillStyle = 'black';\n      context.fillText(image.projectName, textX, textY);\n      context.fillText(image.companyName, textX, textY + 30);\n      context.globalCompositeOperation = 'source-over';\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"experiences\",\n    children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"experience-item\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: el => {\n          if (el) canvasRefs.current.set(index, el);\n        },\n        width: 500 // Set your desired canvas width\n        ,\n        height: 300 // Set your desired canvas height\n        ,\n        className: \"experience-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Experiences, \"t0dpUFAF7gDND3z8k6ZNW4Pp5Wc=\");\n_c = Experiences;\nexport default Experiences;\nvar _c;\n$RefreshReg$(_c, \"Experiences\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","Experiences","images","_s","canvasRefs","Map","drawCanvas","forEach","image","index","canvas","current","get","context","getContext","drawTextOverImage","window","addEventListener","removeEventListener","img","Image","src","onload","clearRect","width","height","drawImage","fillStyle","textAlign","textBaseline","font","textX","textY","fillText","projectName","companyName","globalCompositeOperation","className","children","map","ref","el","set","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx"],"sourcesContent":["// import React from 'react';\n// import './Experiences.scss';\n\n// interface Image {\n//   src: string;\n//   alt: string;\n//   projectName: string;\n//   companyName: string;\n// }\n\n// interface ExperiencesProps {\n//   images: Image[];\n// }\n\n// const Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n//   return (\n//     <div className=\"experiences\">\n//       {images.map((image, index) => (\n//         <div key={index} className=\"experience-item\">\n//           <img src={image.src} alt={image.alt} className=\"experience-image\" />\n//           <div className=\"text-overlay\">\n//             <h3 className=\"project-name\">{image.projectName}</h3>\n//             <p className=\"company-name\">{image.companyName}</p>\n//           </div>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Experiences;\n\n\nimport React, { useRef, useEffect } from 'react';\nimport './Experiences.scss';\n\ninterface Image {\n  src: string;\n  alt: string;\n  projectName: string;\n  companyName: string;\n}\n\ninterface ExperiencesProps {\n  images: Image[];\n}\n\nconst Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n  const canvasRefs = useRef(new Map<number, HTMLCanvasElement>());\n\n  useEffect(() => {\n    const drawCanvas = () => {\n      images.forEach((image, index) => {\n        const canvas = canvasRefs.current.get(index);\n        if (canvas) {\n          const context = canvas.getContext('2d');\n          if (context) {\n            drawTextOverImage(context, image, canvas);\n          }\n        }\n      });\n    };\n\n    drawCanvas();\n    // Add event listener for resizing if you want to handle responsive canvas resizing\n    window.addEventListener('resize', drawCanvas);\n\n    // Cleanup listener\n    return () => {\n      window.removeEventListener('resize', drawCanvas);\n    };\n  }, [images]);\n\n  const drawTextOverImage = (context: CanvasRenderingContext2D, image: Image, canvas: HTMLCanvasElement) => {\n    const img = new Image();\n    img.src = image.src;\n    img.onload = () => {\n      // Clear the canvas and draw the image\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      // Draw the project name\n      context.fillStyle = 'white';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.font = '48px Amiri';\n      const textX = canvas.width / 2;\n      const textY = canvas.height / 2;\n      context.fillText(image.projectName, textX, textY);\n\n      // Draw the company name\n      context.font = '24px Poppins';\n      context.fillText(image.companyName, textX, textY + 30);\n\n      // Create the effect of text color change at the edges\n      context.globalCompositeOperation = 'difference';\n      context.fillStyle = 'black';\n      context.fillText(image.projectName, textX, textY);\n      context.fillText(image.companyName, textX, textY + 30);\n      context.globalCompositeOperation = 'source-over';\n    };\n  };\n\n  return (\n    <div className=\"experiences\">\n      {images.map((image, index) => (\n        <div key={index} className=\"experience-item\">\n          <canvas\n            ref={(el) => {\n              if (el) canvasRefs.current.set(index, el);\n            }}\n            width={500} // Set your desired canvas width\n            height={300} // Set your desired canvas height\n            className=\"experience-canvas\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Experiences;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}