{"ast":null,"code":"var _jsxFileName = \"/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './Experiences.scss';\n\n// interface Image {\n//   src: string;\n//   alt: string;\n//   projectName: string;\n//   companyName: string;\n// }\n\n// interface ExperiencesProps {\n//   images: Image[];\n// }\n\n// const Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n//   const [loadedImages, setLoadedImages] = useState<{ [key: string]: boolean }>({});\n\n//   useEffect(() => {\n//     images.forEach((image) => {\n//       const img = new Image();\n//       img.onload = () => {\n//         setLoadedImages((prev) => ({ ...prev, [image.src]: true }));\n//       };\n//       img.src = image.src;\n//     });\n//   }, [images]);\n\n//   return (\n//     <div className=\"experiences\">\n//       {images.map((image, index) => (\n//         <div key={index} className=\"experience-item\">\n//           {/* Black text (behind the image) */}\n//           <div className=\"text-overlay black-text\">\n//             <h3 className=\"project-name\">{image.projectName}</h3>\n//             <p className=\"company-name\">{image.companyName}</p>\n//           </div>\n\n//           {/* Image */}\n//           <div className='image-container'>\n//             <img\n//               src={image.src}\n//               alt={image.alt}\n//               className=\"experience-image\"\n//               onLoad={(e) => setLoadedImages((prev) => ({ ...prev, [image.src]: true }))}\n//             />\n//           </div>\n//           {/* White text (visible only over the image) */}\n//           {loadedImages[image.src] && (\n//             <div\n//               className=\"text-overlay white-text\"\n//               style={{\n//                 maskImage: `url(${image.src})`,\n//                 WebkitMaskImage: `url(${image.src})`,\n//                 maskSize: 'contain',\n//                 WebkitMaskSize: 'contain',\n//                 maskPosition: 'center',\n//                 WebkitMaskPosition: 'center',\n//                 maskRepeat: 'no-repeat',\n//                 WebkitMaskRepeat: 'no-repeat',\n//               }}\n//             >\n//               <h3 className=\"project-name\">{image.projectName}</h3>\n//               <p className=\"company-name\">{image.companyName}</p>\n//             </div>\n//           )}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Experiences;\n\nimport React, { useState, useEffect } from 'react';\nimport './Experiences.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Experiences = ({\n  images\n}) => {\n  _s();\n  const [loadedImages, setLoadedImages] = useState({});\n  useEffect(() => {\n    images.forEach(image => {\n      const img = new Image();\n      img.onload = () => {\n        setLoadedImages(prev => ({\n          ...prev,\n          [image.src]: true\n        }));\n      };\n      img.src = image.src;\n    });\n  }, [images]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"experiences\",\n    children: images.map((image, index) => {\n      const urlSlug = image.projectName.toLowerCase().replace(/\\s+/g, '-');\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `/${urlSlug}`,\n        className: \"experience-link\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"experience-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-overlay black-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"project-name\",\n              children: image.projectName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"company-name\",\n              children: image.companyName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-container\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: image.src,\n              alt: image.alt,\n              className: \"experience-image\",\n              onLoad: e => setLoadedImages(prev => ({\n                ...prev,\n                [image.src]: true\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), loadedImages[image.src] && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-overlay white-text\",\n            style: {\n              maskImage: `url(${image.src})`,\n              WebkitMaskImage: `url(${image.src})`,\n              maskSize: 'contain',\n              WebkitMaskSize: 'contain',\n              maskPosition: 'center',\n              WebkitMaskPosition: 'center',\n              maskRepeat: 'no-repeat',\n              WebkitMaskRepeat: 'no-repeat'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"project-name\",\n              children: image.projectName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"company-name\",\n              children: image.companyName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Experiences, \"lHbt2XJ3thlqMqrj2qQWuoMmnFA=\");\n_c = Experiences;\nexport default Experiences;\nvar _c;\n$RefreshReg$(_c, \"Experiences\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Experiences","images","_s","loadedImages","setLoadedImages","forEach","image","img","Image","onload","prev","src","className","children","map","index","urlSlug","projectName","toLowerCase","replace","href","fileName","_jsxFileName","lineNumber","columnNumber","companyName","alt","onLoad","e","style","maskImage","WebkitMaskImage","maskSize","WebkitMaskSize","maskPosition","WebkitMaskPosition","maskRepeat","WebkitMaskRepeat","_c","$RefreshReg$"],"sources":["/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './Experiences.scss';\n\n// interface Image {\n//   src: string;\n//   alt: string;\n//   projectName: string;\n//   companyName: string;\n// }\n\n// interface ExperiencesProps {\n//   images: Image[];\n// }\n\n// const Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n//   const [loadedImages, setLoadedImages] = useState<{ [key: string]: boolean }>({});\n\n//   useEffect(() => {\n//     images.forEach((image) => {\n//       const img = new Image();\n//       img.onload = () => {\n//         setLoadedImages((prev) => ({ ...prev, [image.src]: true }));\n//       };\n//       img.src = image.src;\n//     });\n//   }, [images]);\n\n//   return (\n//     <div className=\"experiences\">\n//       {images.map((image, index) => (\n//         <div key={index} className=\"experience-item\">\n//           {/* Black text (behind the image) */}\n//           <div className=\"text-overlay black-text\">\n//             <h3 className=\"project-name\">{image.projectName}</h3>\n//             <p className=\"company-name\">{image.companyName}</p>\n//           </div>\n\n//           {/* Image */}\n//           <div className='image-container'>\n//             <img\n//               src={image.src}\n//               alt={image.alt}\n//               className=\"experience-image\"\n//               onLoad={(e) => setLoadedImages((prev) => ({ ...prev, [image.src]: true }))}\n//             />\n//           </div>\n//           {/* White text (visible only over the image) */}\n//           {loadedImages[image.src] && (\n//             <div\n//               className=\"text-overlay white-text\"\n//               style={{\n//                 maskImage: `url(${image.src})`,\n//                 WebkitMaskImage: `url(${image.src})`,\n//                 maskSize: 'contain',\n//                 WebkitMaskSize: 'contain',\n//                 maskPosition: 'center',\n//                 WebkitMaskPosition: 'center',\n//                 maskRepeat: 'no-repeat',\n//                 WebkitMaskRepeat: 'no-repeat',\n//               }}\n//             >\n//               <h3 className=\"project-name\">{image.projectName}</h3>\n//               <p className=\"company-name\">{image.companyName}</p>\n//             </div>\n//           )}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Experiences;\n\n\nimport React, { useState, useEffect } from 'react';\nimport './Experiences.scss';\n\ninterface Image {\n  src: string;\n  alt: string;\n  projectName: string;\n  companyName: string;\n}\n\ninterface ExperiencesProps {\n  images: Image[];\n}\n\nconst Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n  const [loadedImages, setLoadedImages] = useState<{ [key: string]: boolean }>({});\n\n  useEffect(() => {\n    images.forEach((image) => {\n      const img = new Image();\n      img.onload = () => {\n        setLoadedImages((prev) => ({ ...prev, [image.src]: true }));\n      };\n      img.src = image.src;\n    });\n  }, [images]);\n\n  return (\n    <div className=\"experiences\">\n      {images.map((image, index) => {\n        const urlSlug = image.projectName.toLowerCase().replace(/\\s+/g, '-');\n        return (\n          <a key={index} href={`/${urlSlug}`} className=\"experience-link\">\n            <div className=\"experience-item\">\n              <div className=\"text-overlay black-text\">\n                <h3 className=\"project-name\">{image.projectName}</h3>\n                <p className=\"company-name\">{image.companyName}</p>\n              </div>\n              <div className=\"image-container\">\n                <img\n                  src={image.src}\n                  alt={image.alt}\n                  className=\"experience-image\"\n                  onLoad={(e) => setLoadedImages((prev) => ({ ...prev, [image.src]: true }))}\n                />\n              </div>\n              {loadedImages[image.src] && (\n                <div\n                  className=\"text-overlay white-text\"\n                  style={{\n                    maskImage: `url(${image.src})`,\n                    WebkitMaskImage: `url(${image.src})`,\n                    maskSize: 'contain',\n                    WebkitMaskSize: 'contain',\n                    maskPosition: 'center',\n                    WebkitMaskPosition: 'center',\n                    maskRepeat: 'no-repeat',\n                    WebkitMaskRepeat: 'no-repeat',\n                  }}\n                >\n                  <h3 className=\"project-name\">{image.projectName}</h3>\n                  <p className=\"company-name\">{image.companyName}</p>\n                </div>\n              )}\n            </div>\n          </a>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Experiences;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}