{"ast":null,"code":"var _jsxFileName = \"/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import './Experiences.scss';\n\n// interface Image {\n//   src: string;\n//   alt: string;\n//   projectName: string;\n//   companyName: string;\n// }\n\n// interface ExperiencesProps {\n//   images: Image[];\n// }\n\n// const Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n//   return (\n//     <div className=\"experiences\">\n//       {images.map((image, index) => (\n//         <div key={index} className=\"experience-item\">\n//           <img src={image.src} alt={image.alt} className=\"experience-image\" />\n//           <div className=\"text-overlay\">\n//             <h3 className=\"project-name\">{image.projectName}</h3>\n//             <p className=\"company-name\">{image.companyName}</p>\n//           </div>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Experiences;\n\nimport React, { useRef, useEffect } from 'react';\nimport './Experiences.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Experiences = ({\n  images\n}) => {\n  _s();\n  const canvasRefs = useRef(new Map());\n  useEffect(() => {\n    images.forEach((image, index) => {\n      const canvas = canvasRefs.current.get(index);\n      if (canvas) {\n        const context = canvas.getContext('2d');\n        if (context) {\n          context.clearRect(0, 0, canvas.width, canvas.height);\n          drawTextOverImage(context, image, index);\n        }\n      }\n    });\n  }, [images]);\n  const drawTextOverImage = (context, image, index) => {\n    // Draw image onto canvas\n    const img = new Image();\n    img.src = image.src;\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      // Set up text properties\n      context.font = '48px Amiri';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n\n      // Calculate text position\n      const x = canvas.width / 2;\n      const y = canvas.height / 2;\n\n      // Draw text in white\n      context.fillStyle = 'white';\n      context.fillText(image.projectName, x, y);\n\n      // Clip to the text and change color outside of image bounds\n      context.globalCompositeOperation = 'difference';\n      context.fillStyle = 'black';\n      context.fillText(image.projectName, x, y);\n\n      // Reset composite operation\n      context.globalCompositeOperation = 'source-over';\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"experiences\",\n    children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"experience-item\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: el => {\n          if (el) canvasRefs.current.set(index, el);\n        },\n        width: 500,\n        height: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(Experiences, \"t0dpUFAF7gDND3z8k6ZNW4Pp5Wc=\");\n_c = Experiences;\nexport default Experiences;\nvar _c;\n$RefreshReg$(_c, \"Experiences\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","Experiences","images","_s","canvasRefs","Map","forEach","image","index","canvas","current","get","context","getContext","clearRect","width","height","drawTextOverImage","img","Image","src","onload","drawImage","font","textAlign","textBaseline","x","y","fillStyle","fillText","projectName","globalCompositeOperation","className","children","map","ref","el","set","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx"],"sourcesContent":["// import React from 'react';\n// import './Experiences.scss';\n\n// interface Image {\n//   src: string;\n//   alt: string;\n//   projectName: string;\n//   companyName: string;\n// }\n\n// interface ExperiencesProps {\n//   images: Image[];\n// }\n\n// const Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n//   return (\n//     <div className=\"experiences\">\n//       {images.map((image, index) => (\n//         <div key={index} className=\"experience-item\">\n//           <img src={image.src} alt={image.alt} className=\"experience-image\" />\n//           <div className=\"text-overlay\">\n//             <h3 className=\"project-name\">{image.projectName}</h3>\n//             <p className=\"company-name\">{image.companyName}</p>\n//           </div>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Experiences;\n\nimport React, { useRef, useEffect } from 'react';\nimport './Experiences.scss';\n\ninterface Image {\n  src: string;\n  alt: string;\n  projectName: string;\n  companyName: string;\n}\n\ninterface ExperiencesProps {\n  images: Image[];\n}\n\nconst Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n  const canvasRefs = useRef(new Map<number, HTMLCanvasElement>());\n\n  useEffect(() => {\n    images.forEach((image, index) => {\n      const canvas = canvasRefs.current.get(index);\n      if (canvas) {\n        const context = canvas.getContext('2d');\n        if (context) {\n          context.clearRect(0, 0, canvas.width, canvas.height);\n          drawTextOverImage(context, image, index);\n        }\n      }\n    });\n  }, [images]);\n\n  const drawTextOverImage = (context: CanvasRenderingContext2D, image: Image, index: number) => {\n    // Draw image onto canvas\n    const img = new Image();\n    img.src = image.src;\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      // Set up text properties\n      context.font = '48px Amiri';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n\n      // Calculate text position\n      const x = canvas.width / 2;\n      const y = canvas.height / 2;\n\n      // Draw text in white\n      context.fillStyle = 'white';\n      context.fillText(image.projectName, x, y);\n\n      // Clip to the text and change color outside of image bounds\n      context.globalCompositeOperation = 'difference';\n      context.fillStyle = 'black';\n      context.fillText(image.projectName, x, y);\n\n      // Reset composite operation\n      context.globalCompositeOperation = 'source-over';\n    };\n  };\n\n  return (\n    <div className=\"experiences\">\n      {images.map((image, index) => (\n        <div key={index} className=\"experience-item\">\n          <canvas ref={(el) => { if (el) canvasRefs.current.set(index, el); }} width={500} height={300} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Experiences;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}