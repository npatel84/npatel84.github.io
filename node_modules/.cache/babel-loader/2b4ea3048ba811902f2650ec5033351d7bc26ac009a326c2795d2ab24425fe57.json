{"ast":null,"code":"var _jsxFileName = \"/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Experiences.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Experiences = ({\n  images\n}) => {\n  _s();\n  const [loadedImages, setLoadedImages] = useState({});\n  useEffect(() => {\n    images.forEach(image => {\n      const img = new Image();\n      img.onload = () => {\n        setLoadedImages(prev => ({\n          ...prev,\n          [image.src]: true\n        }));\n      };\n      img.src = image.src;\n    });\n  }, [images]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"experiences\",\n    children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"experience-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-overlay black-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"project-name\",\n          children: image.projectName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"company-name\",\n          children: image.companyName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image.src,\n        alt: image.alt,\n        className: \"experience-image\",\n        onLoad: e => setLoadedImages(prev => ({\n          ...prev,\n          [image.src]: true\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), loadedImages[image.src] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-overlay white-text\",\n        style: {\n          maskImage: `url(${image.src})`,\n          WebkitMaskImage: `url(${image.src})`,\n          maskSize: 'contain',\n          WebkitMaskSize: 'contain',\n          maskPosition: 'center',\n          WebkitMaskPosition: 'center',\n          maskRepeat: 'no-repeat',\n          WebkitMaskRepeat: 'no-repeat'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"project-name\",\n          children: image.projectName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"company-name\",\n          children: image.companyName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Experiences, \"lHbt2XJ3thlqMqrj2qQWuoMmnFA=\");\n_c = Experiences;\nexport default Experiences;\nvar _c;\n$RefreshReg$(_c, \"Experiences\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Experiences","images","_s","loadedImages","setLoadedImages","forEach","image","img","Image","onload","prev","src","className","children","map","index","projectName","fileName","_jsxFileName","lineNumber","columnNumber","companyName","alt","onLoad","e","style","maskImage","WebkitMaskImage","maskSize","WebkitMaskSize","maskPosition","WebkitMaskPosition","maskRepeat","WebkitMaskRepeat","_c","$RefreshReg$"],"sources":["/Users/nilaypatel/Desktop/my-portfolio/src/components/Experiences.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Experiences.scss';\n\ninterface Image {\n  src: string;\n  alt: string;\n  projectName: string;\n  companyName: string;\n}\n\ninterface ExperiencesProps {\n  images: Image[];\n}\n\nconst Experiences: React.FC<ExperiencesProps> = ({ images }) => {\n  const [loadedImages, setLoadedImages] = useState<{ [key: string]: boolean }>({});\n\n  useEffect(() => {\n    images.forEach((image) => {\n      const img = new Image();\n      img.onload = () => {\n        setLoadedImages((prev) => ({ ...prev, [image.src]: true }));\n      };\n      img.src = image.src;\n    });\n  }, [images]);\n\n  return (\n    <div className=\"experiences\">\n      {images.map((image, index) => (\n        <div key={index} className=\"experience-item\">\n          {/* Black text (behind the image) */}\n          <div className=\"text-overlay black-text\">\n            <h3 className=\"project-name\">{image.projectName}</h3>\n            <p className=\"company-name\">{image.companyName}</p>\n          </div>\n\n          {/* Image */}\n          <img\n            src={image.src}\n            alt={image.alt}\n            className=\"experience-image\"\n            onLoad={(e) => setLoadedImages((prev) => ({ ...prev, [image.src]: true }))}\n          />\n\n          {/* White text (visible only over the image) */}\n          {loadedImages[image.src] && (\n            <div\n              className=\"text-overlay white-text\"\n              style={{\n                maskImage: `url(${image.src})`,\n                WebkitMaskImage: `url(${image.src})`,\n                maskSize: 'contain',\n                WebkitMaskSize: 'contain',\n                maskPosition: 'center',\n                WebkitMaskPosition: 'center',\n                maskRepeat: 'no-repeat',\n                WebkitMaskRepeat: 'no-repeat'\n              }}\n            >\n              <h3 className=\"project-name\">{image.projectName}</h3>\n              <p className=\"company-name\">{image.companyName}</p>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Experiences;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}